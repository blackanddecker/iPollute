{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/augmenta/Desktop/Project/iPollute/my-new-project/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../components/Button\";\nimport FormTextInput from \"../components/FormTextInput\";\nimport imageLogo from \"../assets/favicon.png\";\nimport colors from \"../constants/Colors\";\nimport strings from \"../config/strings\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      email: \"\",\n      password: \"\",\n      emailTouched: false,\n      passwordTouched: false\n    };\n\n    _this.handleEmailChange = function (email) {\n      _this.setState({\n        email: email\n      });\n    };\n\n    _this.handlePasswordChange = function (password) {\n      _this.setState({\n        password: password\n      });\n    };\n\n    _this.handleEmailSubmitPress = function () {\n      if (_this.passwordInputRef.current) {\n        _this.passwordInputRef.current.focus();\n      }\n    };\n\n    _this.handleEmailBlur = function () {\n      _this.setState({\n        emailTouched: true\n      });\n    };\n\n    _this.handlePasswordBlur = function () {\n      _this.setState({\n        passwordTouched: true\n      });\n    };\n\n    _this.handleLoginPress = function () {\n      fetch('http://192.168.1.4:5000/login', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: _this.state.email,\n          password: _this.state.password\n        }),\n        method: 'POST'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        console.log(responseJson);\n\n        if (responseJson['success'] == true) {\n          console.log(\"Set param:\", responseJson['user']['id']);\n\n          _this.props.navigation.navigate('Settings', {\n            userId: 86,\n            otherParam: 'anything you want here'\n          });\n        } else {\n          alert(\"Login Failed\");\n        }\n      }).catch(function (error) {\n        console.error(error);\n        alert(\"Login Failed\");\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          emailTouched = _this$state.emailTouched,\n          passwordTouched = _this$state.passwordTouched;\n      var emailError = !email && emailTouched ? strings.EMAIL_REQUIRED : undefined;\n      var passwordError = !password && passwordTouched ? strings.PASSWORD_REQUIRED : undefined;\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.container,\n        behavior: \"padding\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        source: imageLogo,\n        style: styles.logo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.form,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, React.createElement(FormTextInput, {\n        value: this.state.email,\n        onChangeText: this.handleEmailChange,\n        onSubmitEditing: this.handleEmailSubmitPress,\n        placeholder: strings.EMAIL_PLACEHOLDER,\n        autoCorrect: false,\n        keyboardType: \"email-address\",\n        returnKeyType: \"next\",\n        onBlur: this.handleEmailBlur,\n        error: emailError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }), React.createElement(FormTextInput, {\n        ref: this.passwordInputRef,\n        value: this.state.password,\n        onChangeText: this.handlePasswordChange,\n        placeholder: strings.PASSWORD_PLACEHOLDER,\n        secureTextEntry: true,\n        returnKeyType: \"done\",\n        onBlur: this.handlePasswordBlur,\n        error: passwordError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        label: strings.LOGIN,\n        onPress: this.handleLoginPress,\n        disabled: !email || !password,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.WHITE,\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  logo: {\n    flex: 1,\n    width: \"100%\",\n    resizeMode: \"contain\",\n    alignSelf: \"center\"\n  },\n  form: {\n    flex: 1,\n    justifyContent: \"center\",\n    width: \"80%\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/augmenta/Desktop/Project/iPollute/my-new-project/screens/LoginScreen.js"],"names":["React","Component","Button","FormTextInput","imageLogo","colors","strings","LoginScreen","state","email","password","emailTouched","passwordTouched","handleEmailChange","setState","handlePasswordChange","handleEmailSubmitPress","passwordInputRef","current","focus","handleEmailBlur","handlePasswordBlur","handleLoginPress","fetch","headers","body","JSON","stringify","method","then","response","json","responseJson","console","log","props","navigation","navigate","userId","otherParam","alert","catch","error","emailError","EMAIL_REQUIRED","undefined","passwordError","PASSWORD_REQUIRED","styles","container","logo","form","EMAIL_PLACEHOLDER","PASSWORD_PLACEHOLDER","LOGIN","StyleSheet","create","flex","backgroundColor","WHITE","alignItems","justifyContent","width","resizeMode","alignSelf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Image, KeyboardAvoidingView, StyleSheet, View } from \"react-native\";\nimport Button from \"../components/Button\";\nimport FormTextInput from \"../components/FormTextInput\";\nimport imageLogo from \"../assets/favicon.png\";\nimport colors from '../constants/Colors';\nimport strings from \"../config/strings\";\n\n\n\nclass LoginScreen extends Component {\n  state= {\n    email: \"\",\n    password: \"\",\n    emailTouched: false,\n    passwordTouched: false\n  }\n\n  handleEmailChange = (email: string) => {\n    this.setState({ email: email });\n  };\n\n  handlePasswordChange = (password: string) => {\n    this.setState({ password: password });\n  };\n\n  handleEmailSubmitPress = () => {\n    if (this.passwordInputRef.current) {\n      this.passwordInputRef.current.focus();\n    }\n  };\n\n  // ...and we update them in the input onBlur callback\n  handleEmailBlur = () => {\n    this.setState({ emailTouched: true });\n  };\n\n  handlePasswordBlur = () => {\n    this.setState({ passwordTouched: true });\n  };\n\n\n  handleLoginPress = () => {\n    \n    fetch('http://192.168.1.4:5000/login', {\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n        email: this.state.email,\n        password: this.state.password\n\n    }),\n    method: 'POST'\n    })\n    .then((response) => response.json())\n    .then((responseJson) => {\n        console.log(responseJson);     \n        if (responseJson['success'] == true){\n          console.log(\"Set param:\", responseJson['user']['id']);\n          // this.props.navigation.navigate('Settings', { userId: responseJson['user']['id'] })\n          this.props.navigation.navigate('Settings', {\n            userId: 86,\n            otherParam: 'anything you want here',\n          });\n        }\n        else{\n          alert(\"Login Failed\");\n        }\n\n    })\n    .catch((error) => {\n        console.error(error);\n        alert(\"Login Failed\");\n        });\n\n  };\n\n  render() {\n    // Show the validation errors only when the inputs\n    // are empty AND have been blurred at least once\n    const {\n      email,\n      password,\n      emailTouched,\n      passwordTouched\n    } = this.state;\n\n    const emailError =\n      !email && emailTouched\n        ? strings.EMAIL_REQUIRED\n        : undefined;\n    const passwordError =\n      !password && passwordTouched\n        ? strings.PASSWORD_REQUIRED\n        : undefined;\n    return (\n      <KeyboardAvoidingView\n        style={styles.container}\n        behavior=\"padding\"\n      >\n        <Image source={imageLogo} style={styles.logo} />\n        <View style={styles.form}>\n          <FormTextInput\n            value={this.state.email}\n            onChangeText={this.handleEmailChange}\n            onSubmitEditing={this.handleEmailSubmitPress}\n            placeholder={strings.EMAIL_PLACEHOLDER}\n            autoCorrect={false}\n            keyboardType=\"email-address\"\n            returnKeyType=\"next\"\n            onBlur={this.handleEmailBlur}\n            error={emailError}\n          />\n          <FormTextInput\n            ref={this.passwordInputRef}\n            value={this.state.password}\n            onChangeText={this.handlePasswordChange}\n            placeholder={strings.PASSWORD_PLACEHOLDER}\n            secureTextEntry={true}\n            returnKeyType=\"done\"\n            onBlur={this.handlePasswordBlur}\n            error={passwordError}\n          />\n          <Button\n            label={strings.LOGIN}\n            onPress={this.handleLoginPress}\n            disabled={!email || !password}\n          />\n        </View>\n      </KeyboardAvoidingView>\n\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.WHITE,\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  logo: {\n    flex: 1,\n    width: \"100%\",\n    resizeMode: \"contain\",\n    alignSelf: \"center\"\n  },\n  form: {\n    flex: 1,\n    justifyContent: \"center\",\n    width: \"80%\"\n  }\n});\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}