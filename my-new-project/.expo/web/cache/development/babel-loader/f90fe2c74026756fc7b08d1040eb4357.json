{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/augmenta/Desktop/Project/iPollute/my-new-project/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../components/Button\";\nimport FormTextInput from \"../components/FormTextInput\";\nimport imageLogo from \"../assets/favicon.png\";\nimport colors from \"../constants/Colors\";\nimport strings from \"../config/strings\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      email: \"\",\n      password: \"\"\n    };\n\n    _this.handleEmailChange = function (email) {\n      _this.setState({\n        email: email\n      });\n    };\n\n    _this.handlePasswordChange = function (password) {\n      _this.setState({\n        password: password\n      });\n    };\n\n    _this.handleLoginPress = function () {\n      console.log(\"Login button pressed\");\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          email = _this$state.email,\n          password = _this$state.password,\n          emailTouched = _this$state.emailTouched,\n          passwordTouched = _this$state.passwordTouched;\n      var emailError = !email && emailTouched ? strings.EMAIL_REQUIRED : undefined;\n      var passwordError = !password && passwordTouched ? strings.PASSWORD_REQUIRED : undefined;\n      return React.createElement(KeyboardAvoidingView, {\n        style: styles.container,\n        behavior: \"padding\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        source: imageLogo,\n        style: styles.logo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.form,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, React.createElement(FormTextInput, {\n        value: this.state.email,\n        onChangeText: this.handleEmailChange,\n        onSubmitEditing: this.handleEmailSubmitPress,\n        placeholder: strings.EMAIL_PLACEHOLDER,\n        autoCorrect: false,\n        keyboardType: \"email-address\",\n        returnKeyType: \"next\",\n        onBlur: this.handleEmailBlur,\n        error: emailError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }), React.createElement(FormTextInput, {\n        ref: this.passwordInputRef,\n        value: this.state.password,\n        onChangeText: this.handlePasswordChange,\n        placeholder: strings.PASSWORD_PLACEHOLDER,\n        secureTextEntry: true,\n        returnKeyType: \"done\",\n        onBlur: this.handlePasswordBlur,\n        error: passwordError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        label: strings.LOGIN,\n        onPress: this.handleLoginPress,\n        disabled: !email || !password,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.WHITE,\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  logo: {\n    flex: 1,\n    width: \"100%\",\n    resizeMode: \"contain\",\n    alignSelf: \"center\"\n  },\n  form: {\n    flex: 1,\n    justifyContent: \"center\",\n    width: \"80%\"\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/augmenta/Desktop/Project/iPollute/my-new-project/screens/LoginScreen.js"],"names":["React","Component","Button","FormTextInput","imageLogo","colors","strings","LoginScreen","state","email","password","handleEmailChange","setState","handlePasswordChange","handleLoginPress","console","log","emailTouched","passwordTouched","emailError","EMAIL_REQUIRED","undefined","passwordError","PASSWORD_REQUIRED","styles","container","logo","form","handleEmailSubmitPress","EMAIL_PLACEHOLDER","handleEmailBlur","passwordInputRef","PASSWORD_PLACEHOLDER","handlePasswordBlur","LOGIN","StyleSheet","create","flex","backgroundColor","WHITE","alignItems","justifyContent","width","resizeMode","alignSelf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Image, KeyboardAvoidingView, StyleSheet, View } from \"react-native\";\nimport Button from \"../components/Button\";\nimport FormTextInput from \"../components/FormTextInput\";\nimport imageLogo from \"../assets/favicon.png\";\nimport colors from '../constants/Colors';\nimport strings from \"../config/strings\";\n\n\n\nclass LoginScreen extends Component {\n  state= {\n    email: \"\",\n    password: \"\"\n  }\n\n  handleEmailChange = (email: string) => {\n    this.setState({ email: email });\n  };\n\n  handlePasswordChange = (password: string) => {\n    this.setState({ password: password });\n  };\n\n  handleLoginPress = () => {\n    console.log(\"Login button pressed\");\n  };\n\n  render() {\n    // Show the validation errors only when the inputs\n    // are empty AND have been blurred at least once\n    const {\n      email,\n      password,\n      emailTouched,\n      passwordTouched\n    } = this.state;\n    \n    const emailError =\n      !email && emailTouched\n        ? strings.EMAIL_REQUIRED\n        : undefined;\n    const passwordError =\n      !password && passwordTouched\n        ? strings.PASSWORD_REQUIRED\n        : undefined;\n    return (\n      <KeyboardAvoidingView\n        style={styles.container}\n        behavior=\"padding\"\n      >\n        <Image source={imageLogo} style={styles.logo} />\n        <View style={styles.form}>\n          <FormTextInput\n            value={this.state.email}\n            onChangeText={this.handleEmailChange}\n            onSubmitEditing={this.handleEmailSubmitPress}\n            placeholder={strings.EMAIL_PLACEHOLDER}\n            autoCorrect={false}\n            keyboardType=\"email-address\"\n            returnKeyType=\"next\"\n            onBlur={this.handleEmailBlur}\n            error={emailError}\n          />\n          <FormTextInput\n            ref={this.passwordInputRef}\n            value={this.state.password}\n            onChangeText={this.handlePasswordChange}\n            placeholder={strings.PASSWORD_PLACEHOLDER}\n            secureTextEntry={true}\n            returnKeyType=\"done\"\n            onBlur={this.handlePasswordBlur}\n            error={passwordError}\n          />\n          <Button\n            label={strings.LOGIN}\n            onPress={this.handleLoginPress}\n            disabled={!email || !password}\n          />\n        </View>\n      </KeyboardAvoidingView>\n\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.WHITE,\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  },\n  logo: {\n    flex: 1,\n    width: \"100%\",\n    resizeMode: \"contain\",\n    alignSelf: \"center\"\n  },\n  form: {\n    flex: 1,\n    justifyContent: \"center\",\n    width: \"80%\"\n  }\n});\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}