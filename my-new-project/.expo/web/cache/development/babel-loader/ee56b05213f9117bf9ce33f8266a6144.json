{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _jsxFileName = \"/home/augmenta/Desktop/Project/my-new-project/screens/SettignsScreen.js\",\n    _this3 = this;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport HeaderButton from \"../components/HeaderButton\";\nimport Colors from \"../constants/Colors\";\n\nvar SettingsScreen = function (_Component) {\n  _inherits(SettingsScreen, _Component);\n\n  var _super = _createSuper(SettingsScreen);\n\n  function SettingsScreen() {\n    var _this;\n\n    _classCallCheck(this, SettingsScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      username: '',\n      email: '',\n      isLoading: true,\n      isDisabled: true\n    };\n\n    _this.componentDidMount = function () {\n      fetch('http://0.0.0.0:5000/getCustomer', {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'GET'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        console.log(responseJson);\n\n        _this.setState({\n          isLoading: !_this.state.isLoading\n        });\n      }).catch(function (error) {\n        console.error(error);\n        alert(\"User data didnt fetch\");\n      });\n    };\n\n    _this.updateSettings = function (username, email) {\n      alert('username: ' + username + ' email: ' + email);\n    };\n\n    return _this;\n  }\n\n  _createClass(SettingsScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.loading) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 9\n          }\n        }, React.createElement(TextInput, {\n          style: styles.input,\n          underlineColorAndroid: \"transparent\",\n          placeholder: this.state.username,\n          placeholderTextColor: Colors.primaryColor,\n          autoCapitalize: \"none\",\n          onChangeText: this.handleHours,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 11\n          }\n        }), React.createElement(TextInput, {\n          style: styles.input,\n          underlineColorAndroid: \"transparent\",\n          placeholder: this.state.email,\n          placeholderTextColor: Colors.primaryColor,\n          autoCapitalize: \"none\",\n          onChangeText: this.handleHours,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }\n        }), React.createElement(Button, {\n          style: styles.submitButton,\n          onPress: function onPress() {\n            return _this2.updateSettings(_this2.state.username, _this2.state.email);\n          },\n          title: \"Save\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }\n        }));\n      } else {\n        return React.createElement(ActivityIndicator, {\n          size: \"large\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 11\n          }\n        });\n      }\n    }\n  }]);\n\n  return SettingsScreen;\n}(Component);\n\n;\n\nSettingsScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Settings',\n    headerLeft: React.createElement(HeaderButtons, {\n      HeaderButtonComponent: HeaderButton,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, React.createElement(Item, {\n      title: \"Menu\",\n      iconName: \"ios-menu\",\n      onPress: function onPress() {\n        navData.navigation.toggleDrawer();\n      },\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }))\n  };\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: 12,\n    margin: 20,\n    textAlign: 'center'\n  },\n  submitButton: {\n    backgroundColor: Colors.primaryColor,\n    padding: 10,\n    margin: 15,\n    height: 40\n  },\n  submitButtonText: {\n    color: 'white'\n  },\n  container: {\n    paddingTop: 23\n  },\n  input: {\n    margin: 15,\n    height: 40,\n    borderColor: '#7a42f4',\n    borderWidth: 1\n  }\n});\nexport default SettingsScreen;","map":{"version":3,"sources":["/home/augmenta/Desktop/Project/my-new-project/screens/SettignsScreen.js"],"names":["React","Component","HeaderButtons","Item","HeaderButton","Colors","SettingsScreen","state","username","email","isLoading","isDisabled","componentDidMount","fetch","headers","method","then","response","json","responseJson","console","log","setState","catch","error","alert","updateSettings","loading","styles","input","primaryColor","handleHours","submitButton","navigationOptions","navData","headerTitle","headerLeft","navigation","toggleDrawer","StyleSheet","create","screen","flex","alignItems","title","fontFamily","fontSize","margin","textAlign","backgroundColor","padding","height","submitButtonText","color","container","paddingTop","borderColor","borderWidth"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,IAAxB,QAAoC,iCAApC;;;;;;AAGA,OAAOC,YAAP;AAEA,OAAOC,MAAP;;IAEMC,c;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAG,EADL;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,SAAS,EAAE,IAHL;AAINC,MAAAA,UAAU,EAAE;AAJN,K;;UAORC,iB,GAAoB,YAAM;AACxBC,MAAAA,KAAK,CAAC,iCAAD,EAAoC;AACvCC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB;AAFT,SAD8B;AAKtCC,QAAAA,MAAM,EAAE;AAL8B,OAApC,CAAL,CAOCC,IAPD,CAOM,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,OAPN,EAQCF,IARD,CAQM,UAACG,YAAD,EAAkB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;;AACA,cAAKG,QAAL,CAAc;AAACZ,UAAAA,SAAS,EAAE,CAAC,MAAKH,KAAL,CAAWG;AAAxB,SAAd;AACH,OAXD,EAYCa,KAZD,CAYO,UAACC,KAAD,EAAW;AACfJ,QAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACAC,QAAAA,KAAK,CAAC,uBAAD,CAAL;AAEA,OAhBH;AAiBC,K;;UAGDC,c,GAAiB,UAAClB,QAAD,EAAWC,KAAX,EAAqB;AACpCgB,MAAAA,KAAK,CAAC,eAAejB,QAAf,GAA0B,UAA1B,GAAuCC,KAAxC,CAAL;AACD,K;;;;;;;6BACQ;AAAA;;AAEP,UAAG,CAAC,KAAKF,KAAL,CAAWoB,OAAf,EAAwB;AACtB,eACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAIC,MAAM,CAACC,KAA3B;AACE,UAAA,qBAAqB,EAAG,aAD1B;AAEE,UAAA,WAAW,EAAI,KAAKtB,KAAL,CAAWC,QAF5B;AAGE,UAAA,oBAAoB,EAAIH,MAAM,CAACyB,YAHjC;AAIE,UAAA,cAAc,EAAG,MAJnB;AAKE,UAAA,YAAY,EAAI,KAAKC,WALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,EASE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAIH,MAAM,CAACC,KAA3B;AACE,UAAA,qBAAqB,EAAG,aAD1B;AAEE,UAAA,WAAW,EAAI,KAAKtB,KAAL,CAAWE,KAF5B;AAGE,UAAA,oBAAoB,EAAIJ,MAAM,CAACyB,YAHjC;AAIE,UAAA,cAAc,EAAG,MAJnB;AAKE,UAAA,YAAY,EAAI,KAAKC,WALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,EAgBE,oBAAC,MAAD;AACE,UAAA,KAAK,EAAIH,MAAM,CAACI,YADlB;AAEE,UAAA,OAAO,EAAI;AAAA,mBAAM,MAAI,CAACN,cAAL,CAAoB,MAAI,CAACnB,KAAL,CAAWC,QAA/B,EAAyC,MAAI,CAACD,KAAL,CAAWE,KAApD,CAAN;AAAA,WAFb;AAGE,UAAA,KAAK,EAAE,MAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAhBF,CADA;AAyBD,OA1BD,MA2BI;AACF,eACE,oBAAC,iBAAD;AAAmB,UAAA,IAAI,EAAE,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAED;AACF;;;;EAlEwBR,S;;AAqE5B;;AAEDK,cAAc,CAAC2B,iBAAf,GAAmC,UAAAC,OAAO,EAAI;AAC5C,SAAO;AACLC,IAAAA,WAAW,EAAE,UADR;AAELC,IAAAA,UAAU,EACR,oBAAC,aAAD;AAAe,MAAA,qBAAqB,EAAEhC,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,QAAQ,EAAC,UAFX;AAGE,MAAA,OAAO,EAAE,mBAAM;AACb8B,QAAAA,OAAO,CAACG,UAAR,CAAmBC,YAAnB;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAHG,GAAP;AAcD,CAfD;;AAiBA,IAAMV,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,UAAU,EAAE;AAFN,GADuB;AAK/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE,gBADP;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,MAAM,EAAE,EAHH;AAILC,IAAAA,SAAS,EAAE;AAJN,GALwB;AAW/BhB,EAAAA,YAAY,EAAE;AACZiB,IAAAA,eAAe,EAAE5C,MAAM,CAACyB,YADZ;AAEZoB,IAAAA,OAAO,EAAE,EAFG;AAGZH,IAAAA,MAAM,EAAE,EAHI;AAIZI,IAAAA,MAAM,EAAE;AAJI,GAXiB;AAiB/BC,EAAAA,gBAAgB,EAAC;AACbC,IAAAA,KAAK,EAAE;AADM,GAjBc;AAoB/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE;AADH,GApBoB;AAuB/B1B,EAAAA,KAAK,EAAE;AACLkB,IAAAA,MAAM,EAAE,EADH;AAELI,IAAAA,MAAM,EAAE,EAFH;AAGLK,IAAAA,WAAW,EAAE,SAHR;AAILC,IAAAA,WAAW,EAAE;AAJR;AAvBwB,CAAlB,CAAf;AA+BA,eAAenD,cAAf","sourcesContent":["import React, { Component } from 'react'\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport { View, Text, TextInput, StyleSheet, Button } from 'react-native';\n\nimport HeaderButton from '../components/HeaderButton';\n\nimport Colors from '../constants/Colors';\n\nclass SettingsScreen extends Component {\n\n  state = {\n    username : '',\n    email: '',\n    isLoading: true,\n    isDisabled: true\n  }\n\n  componentDidMount = () => {\n    fetch('http://0.0.0.0:5000/getCustomer', {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n       method: 'GET'\n    })\n    .then((response) => response.json())\n    .then((responseJson) => {\n        console.log(responseJson);\n        this.setState({isLoading: !this.state.isLoading })\n    })\n    .catch((error) => {\n       console.error(error);\n       alert(\"User data didnt fetch\");\n  \n      });\n    }\n    \n\n    updateSettings = (username, email) => {\n      alert('username: ' + username + ' email: ' + email)\n    }\n    render() {\n  \n      if(!this.state.loading) {\n        return (\n        <View>\n\n          <TextInput style = {styles.input}\n            underlineColorAndroid = \"transparent\"\n            placeholder = {this.state.username}\n            placeholderTextColor = {Colors.primaryColor}\n            autoCapitalize = \"none\"\n            onChangeText = {this.handleHours}/>\n\n          <TextInput style = {styles.input}\n            underlineColorAndroid = \"transparent\"\n            placeholder = {this.state.email}\n            placeholderTextColor = {Colors.primaryColor}\n            autoCapitalize = \"none\"\n            onChangeText = {this.handleHours}/>\n\n          <Button\n            style = {styles.submitButton}\n            onPress = {() => this.updateSettings(this.state.username, this.state.email)}\n            title= \"Save\" \n            >\n          </Button>\n        </View>\n        )\n      }\n      else{\n        return (\n          <ActivityIndicator size={\"large\"} ></ActivityIndicator>)\n      }\n    }\n\n  // return <MealList listData={favMeals} navigation={props.navigation} />;\n};\n\nSettingsScreen.navigationOptions = navData => {\n  return {\n    headerTitle: 'Settings',\n    headerLeft: (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Menu\"\n          iconName=\"ios-menu\"\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n    )\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: 12,\n    margin: 20,\n    textAlign: 'center'\n  },\n  submitButton: {\n    backgroundColor: Colors.primaryColor,\n    padding: 10,\n    margin: 15,\n    height: 40,\n  },\n  submitButtonText:{\n      color: 'white'\n  },\n  container: {\n    paddingTop: 23\n  },\n  input: {\n    margin: 15,\n    height: 40,\n    borderColor: '#7a42f4',\n    borderWidth: 1\n  }\n});\n\nexport default SettingsScreen;\n"]},"metadata":{},"sourceType":"module"}