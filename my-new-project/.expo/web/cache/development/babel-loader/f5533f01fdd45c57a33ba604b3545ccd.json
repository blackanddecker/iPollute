{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/augmenta/Desktop/Project/iPollute/my-new-project/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Colors from \"../constants/Colors\";\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      email: '',\n      password: ''\n    };\n\n    _this.setEmail = function (email) {\n      _this.setState({\n        email: email\n      });\n    };\n\n    _this.setPassword = function (password) {\n      _this.setState({\n        password: password\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, React.createElement(TextInput, {\n        label: \"Email\",\n        returnKeyType: \"next\",\n        value: this.email,\n        error: !!this.email,\n        errorText: this.email,\n        autoCapitalize: \"none\",\n        autoCompleteType: \"email\",\n        textContentType: \"emailAddress\",\n        keyboardType: \"email-address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 22\n        }\n      }), React.createElement(TextInput, {\n        label: \"Password\",\n        returnKeyType: \"done\",\n        value: this.password,\n        error: !!this.password,\n        errorText: this.password,\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 22\n        }\n      }), React.createElement(View, {\n        style: styles.forgotPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 22\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('ForgotPasswordScreen');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 27\n        }\n      }, React.createElement(Text, {\n        style: styles.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 33\n        }\n      }, \"Forgot your password?\"))), React.createElement(Button, {\n        mode: \"contained\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 22\n        }\n      }, \"Login\"), React.createElement(View, {\n        style: styles.row,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 22\n        }\n      }, React.createElement(Text, {\n        style: styles.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 27\n        }\n      }, \"Don\\u2019t have an account? \"), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('RegisterScreen');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 27\n        }\n      }, React.createElement(Text, {\n        style: styles.link,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }\n      }, \"Sign up\"))));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\n;\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  label: {\n    color: Colors.secondary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: Colors.primary\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/augmenta/Desktop/Project/iPollute/my-new-project/screens/LoginScreen.js"],"names":["React","Component","Colors","LoginScreen","state","email","password","setEmail","setState","setPassword","styles","forgotPassword","navigation","navigate","label","row","link","StyleSheet","create","width","alignItems","marginBottom","flexDirection","marginTop","color","secondary","fontWeight","primary"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity , Button} from 'react-native';\nimport Colors from '../constants/Colors';\n\n\nclass LoginScreen extends Component {\n     // const [email, setEmail] = useState({ value: '', error: '' });\n     // const [password, setPassword] = useState({ value: '', error: '' });\n  \n     // onLoginPressed = () => {\n     //    const emailError = emailValidator(email.value);\n     //    const passwordError = passwordValidator(password.value);\n  \n     //    if (emailError || passwordError) {\n     //      setEmail({ ...email, error: emailError });\n     //      setPassword({ ...password, error: passwordError });\n     //      return;\n     //    }\n  \n     //    navigation.navigate('Dashboard');\n     // };\n\n     state = {\n          email: '',\n          password: ''\n     }\n\n     setEmail = (email) => {this.setState({ email: email })}\n     setPassword = (password) => {this.setState({ password: password})}\n \n     render() {\n          return(\n          \n                <View>\n                     <TextInput\n                         label=\"Email\"\n                         returnKeyType=\"next\"\n                         value={this.email}\n                         // onChangeText={this.setEmail()}\n                         error={!!this.email}\n                         errorText={this.email}\n                         autoCapitalize=\"none\"\n                         autoCompleteType=\"email\"\n                         textContentType=\"emailAddress\"\n                         keyboardType=\"email-address\"\n                     />\n          \n                     <TextInput\n                         label=\"Password\"\n                         returnKeyType=\"done\"\n                         value={this.password}\n                         // onChangeText={this.setPassword()}\n                         error={!!this.password}\n                         errorText={this.password}\n                         secureTextEntry\n                     />\n          \n                     <View style={styles.forgotPassword}>\n                          <TouchableOpacity\n                                onPress={() => navigation.navigate('ForgotPasswordScreen')}\n                          >\n                                <Text style={styles.label}>Forgot your password?</Text>\n                          </TouchableOpacity>\n                     </View>\n          \n                     <Button mode=\"contained\" >\n                     Login\n                     </Button>\n          \n                     <View style={styles.row}>\n                          <Text style={styles.label}>Don’t have an account? </Text>\n                          <TouchableOpacity onPress={() => navigation.navigate('RegisterScreen')}>\n                                <Text style={styles.link}>Sign up</Text>\n                          </TouchableOpacity>\n                     </View>\n                </View>\n        )\n     }\n};\n  \nconst styles = StyleSheet.create({\n  forgotPassword: {\n     width: '100%',\n     alignItems: 'flex-end',\n     marginBottom: 24,\n  },\n  row: {\n     flexDirection: 'row',\n     marginTop: 4,\n  },\n  label: {\n     color:Colors.secondary,\n  },\n  link: {\n     fontWeight: 'bold',\n     color: Colors.primary,\n  },\n});\n  \nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}