{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/augmenta/Desktop/Project/my-new-project/screens/FiltersScreen.js\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport { Slider } from 'react-native-elements';\nimport DatePicker from 'react-native-datepicker';\nimport HeaderButton from \"../components/HeaderButton\";\nimport Colors from \"../constants/Colors\";\n\nvar FilterSwitch = function FilterSwitch(props) {\n  return React.createElement(View, {\n    style: styles.filterContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, props.label), React.createElement(Switch, {\n    trackColor: {\n      true: Colors.primaryColor\n    },\n    thumbColor: Platform.OS === 'android' ? Colors.primaryColor : '',\n    value: props.state,\n    onValueChange: props.onChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar FiltersScreen = function FiltersScreen(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isGlutenFree = _useState2[0],\n      setIsGlutenFree = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLactoseFree = _useState4[0],\n      setIsLactoseFree = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isVegan = _useState6[0],\n      setIsVegan = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isVegetarian = _useState8[0],\n      setIsVegetarian = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sliderCostValue = _useState10[0],\n      setSliderCostValue = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      sliderHoursValue = _useState12[0],\n      setSliderHoursValue = _useState12[1];\n\n  var saveFilters = useCallback(function () {\n    var appliedFilters = {\n      glutenFree: isGlutenFree,\n      lactoseFree: isLactoseFree,\n      vegan: isVegan,\n      isVegetarian: isVegetarian\n    };\n    console.log(appliedFilters);\n  }, [isGlutenFree, isLactoseFree, isVegan, isVegetarian]);\n  useEffect(function () {\n    navigation.setParams({\n      save: saveFilters\n    });\n  }, [saveFilters]);\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Available Filters / Restrictions\"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Start date: \", sliderCostValue), React.createElement(DatePicker, {\n    style: {\n      width: 200\n    },\n    date: \"2016-05-15\",\n    mode: \"date\",\n    placeholder: \"select date\",\n    format: \"YYYY-MM-DD\",\n    minDate: \"2016-05-01\",\n    maxDate: \"2016-06-01\",\n    confirmBtnText: \"Confirm\",\n    cancelBtnText: \"Cancel\",\n    customStyles: {\n      dateIcon: {\n        position: 'absolute',\n        left: 0,\n        top: 4,\n        marginLeft: 0\n      },\n      dateInput: {\n        marginLeft: 36\n      }\n    },\n    onDateChange: function onDateChange(date) {\n      _this.setState({\n        date: date\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, \"End date: \", sliderCostValue), React.createElement(DatePicker, {\n    style: {\n      width: 200\n    },\n    date: \"2016-05-15\",\n    mode: \"date\",\n    placeholder: \"select date\",\n    format: \"YYYY-MM-DD\",\n    minDate: \"2016-05-01\",\n    maxDate: \"2016-06-01\",\n    confirmBtnText: \"Confirm\",\n    cancelBtnText: \"Cancel\",\n    customStyles: {\n      dateIcon: {\n        position: 'absolute',\n        left: 0,\n        top: 4,\n        marginLeft: 0\n      },\n      dateInput: {\n        marginLeft: 36\n      }\n    },\n    onDateChange: function onDateChange(date) {\n      _this.setState({\n        date: date\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, \"Transport Type: \", sliderCostValue), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Cost Value: \", sliderCostValue), React.createElement(Slider, {\n    value: sliderCostValue,\n    onValueChange: function onValueChange(newValue) {\n      return setSliderCostValue(newValue);\n    },\n    maximumValue: 50,\n    minimumValue: 0,\n    step: 5,\n    trackStyle: {\n      height: 10,\n      backgroundColor: 'transparent'\n    },\n    thumbStyle: {\n      height: 20,\n      width: 20,\n      backgroundColor: 'green'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.filterContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, \"Hours Value: \", sliderHoursValue), React.createElement(Slider, {\n    value: sliderHoursValue,\n    onValueChange: function onValueChange(newValue) {\n      return setSliderHoursValue(newValue);\n    },\n    maximumValue: 50,\n    minimumValue: 0,\n    step: 5,\n    trackStyle: {\n      height: 10,\n      backgroundColor: 'transparent'\n    },\n    thumbStyle: {\n      height: 20,\n      width: 20,\n      backgroundColor: 'green'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  })));\n};\n\nFiltersScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Filters',\n    headerLeft: React.createElement(HeaderButtons, {\n      HeaderButtonComponent: HeaderButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, React.createElement(Item, {\n      title: \"Menu\",\n      iconName: \"ios-menu\",\n      onPress: function onPress() {\n        navData.navigation.toggleDrawer();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    })),\n    headerRight: React.createElement(HeaderButtons, {\n      HeaderButtonComponent: HeaderButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, React.createElement(Item, {\n      title: \"Save\",\n      iconName: \"ios-save\",\n      onPress: navData.navigation.getParam('save'),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }))\n  };\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    marginLeft: 10,\n    paddingTop: 15,\n    marginRight: 10,\n    alignItems: \"stretch\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: 22,\n    margin: 20,\n    textAlign: 'center'\n  },\n  filterContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'stretch',\n    marginVertical: 15\n  },\n  sameRow: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});\nexport default FiltersScreen;","map":{"version":3,"sources":["/home/augmenta/Desktop/Project/my-new-project/screens/FiltersScreen.js"],"names":["React","useState","useEffect","useCallback","HeaderButtons","Item","Slider","DatePicker","HeaderButton","Colors","FilterSwitch","props","styles","filterContainer","label","true","primaryColor","Platform","OS","state","onChange","FiltersScreen","navigation","isGlutenFree","setIsGlutenFree","isLactoseFree","setIsLactoseFree","isVegan","setIsVegan","isVegetarian","setIsVegetarian","sliderCostValue","setSliderCostValue","sliderHoursValue","setSliderHoursValue","saveFilters","appliedFilters","glutenFree","lactoseFree","vegan","console","log","setParams","save","screen","title","width","dateIcon","position","left","top","marginLeft","dateInput","date","setState","newValue","height","backgroundColor","navigationOptions","navData","headerTitle","headerLeft","toggleDrawer","headerRight","getParam","StyleSheet","create","flex","paddingTop","marginRight","alignItems","justifyContent","fontFamily","fontSize","margin","textAlign","flexDirection","marginVertical","sameRow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { View, Text, StyleSheet, Switch, Platform} from 'react-native';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport { Slider } from 'react-native-elements';\nimport DatePicker from 'react-native-datepicker'\n\nimport HeaderButton from '../components/HeaderButton';\nimport Colors from '../constants/Colors';\n\nconst FilterSwitch = props => {\n  return (\n    <View style={styles.filterContainer}>\n      <Text>{props.label}</Text>\n      <Switch\n        trackColor={{ true: Colors.primaryColor }}\n        thumbColor={Platform.OS === 'android' ? Colors.primaryColor : ''}\n        value={props.state}\n        onValueChange={props.onChange}\n      />\n    </View>\n  );\n};\n\nconst FiltersScreen = props => {\n  const { navigation } = props;\n\n  const [isGlutenFree, setIsGlutenFree] = useState(false);\n  const [isLactoseFree, setIsLactoseFree] = useState(false);\n  const [isVegan, setIsVegan] = useState(false);\n  const [isVegetarian, setIsVegetarian] = useState(false);\n  const [sliderCostValue, setSliderCostValue] = useState(0);\n  const [sliderHoursValue, setSliderHoursValue] = useState(0);\n\n  \n\n  const saveFilters = useCallback(() => {\n    const appliedFilters = {\n      glutenFree: isGlutenFree,\n      lactoseFree: isLactoseFree,\n      vegan: isVegan,\n      isVegetarian: isVegetarian\n    };\n\n    console.log(appliedFilters);\n  }, [isGlutenFree, isLactoseFree, isVegan, isVegetarian]);\n\n  useEffect(() => {\n    navigation.setParams({ save: saveFilters });\n  }, [saveFilters]);\n\n  return (\n    <View style={styles.screen}>\n\n      <Text style={styles.title}>Available Filters / Restrictions</Text>\n      <Text>Start date: {sliderCostValue}</Text>\n\n      <DatePicker\n        style={{width: 200}}\n        date=\"2016-05-15\"//{this.state.date}\n        mode=\"date\"\n        placeholder=\"select date\"\n        format=\"YYYY-MM-DD\"\n        minDate=\"2016-05-01\"\n        maxDate=\"2016-06-01\"\n        confirmBtnText=\"Confirm\"\n        cancelBtnText=\"Cancel\"\n        customStyles={{\n          dateIcon: {\n            position: 'absolute',\n            left: 0,\n            top: 4,\n            marginLeft: 0\n          },\n          dateInput: {\n            marginLeft: 36\n          }\n          // ... You can check the source to find the other keys.\n        }}\n        onDateChange={(date) => {this.setState({date: date})}}\n      />\n  \n    <Text>End date: {sliderCostValue}</Text>\n\n    <DatePicker\n      style={{width: 200}}\n      date=\"2016-05-15\"//{this.state.date}\n      mode=\"date\"\n      placeholder=\"select date\"\n      format=\"YYYY-MM-DD\"\n      minDate=\"2016-05-01\"\n      maxDate=\"2016-06-01\"\n      confirmBtnText=\"Confirm\"\n      cancelBtnText=\"Cancel\"\n      customStyles={{\n        dateIcon: {\n          position: 'absolute',\n          left: 0,\n          top: 4,\n          marginLeft: 0\n        },\n        dateInput: {\n          marginLeft: 36\n        }\n        // ... You can check the source to find the other keys.\n      }}\n      onDateChange={(date) => {this.setState({date: date})}}\n    />  \n      <Text>Transport Type: {sliderCostValue}</Text>\n      <Text>Cost Value: {sliderCostValue}</Text>\n      <Slider\n          value={sliderCostValue}\n          onValueChange={ newValue => setSliderCostValue(newValue)}\n          maximumValue={50}\n          minimumValue={0}\n          step={5}\n          trackStyle={{ height: 10, backgroundColor: 'transparent' }}\n          thumbStyle={{ height: 20, width: 20, backgroundColor: 'green' }}\n      />\n\n      <View style={styles.filterContainer}>\n      <Text>Hours Value: {sliderHoursValue}</Text>\n      <Slider\n          value={sliderHoursValue}\n          onValueChange={ newValue => setSliderHoursValue(newValue)}\n          maximumValue={50}\n          minimumValue={0}\n          step={5}\n          trackStyle={{ height: 10, backgroundColor: 'transparent' }}\n          thumbStyle={{ height: 20, width: 20, backgroundColor: 'green' }}\n      />\n      </View>\n    </View>\n  );\n};\n\nFiltersScreen.navigationOptions = navData => {\n  return {\n    headerTitle: 'Filters',\n    headerLeft: (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Menu\"\n          iconName=\"ios-menu\"\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n    ),\n    headerRight:(\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Save\"\n          iconName=\"ios-save\"\n          onPress={navData.navigation.getParam('save')}\n        />\n      </HeaderButtons>\n    )\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    marginLeft: 10,\n    paddingTop: 15,\n    marginRight: 10,\n    alignItems: \"stretch\",\n    justifyContent: \"center\"\n  },\n  title: {\n    fontFamily: 'open-sans-bold',\n    fontSize: 22,\n    margin: 20,\n    textAlign: 'center'\n  },\n  filterContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'stretch',\n    marginVertical: 15\n  },\n  sameRow:{\n    flex:1,\n    flexDirection:'row'\n  }\n});\n\nexport default FiltersScreen;\n"]},"metadata":{},"sourceType":"module"}